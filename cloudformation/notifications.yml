AWSTemplateFormatVersion: '2010-09-09'
Description: 'Frontend Notifications Infrastructure'

Parameters:
  GCMSubscriptionsTableName:
    Description: The table name of the GCM Subscriptions Table
    Type: String
  FrontendNotificationMessageTableName:
    Description: The table name of the notification messages table
    Type: String
  GCMWorkerQueueName:
    Description: The name of the GCM work queue
    Type: String
  TopicMessageQueueName:
    Description: The name of the topic message queue
    Type: String
  LastSentTableName:
    Description: The name of the last sent message database
    Type: String
  FirehoseLeaseTableName:
    Description: The name of the last sent message database
    Type: String
  FrontendNotificationMessagesCacheClusterName:
    Description: The name of the notification messages cache cluster
    Type: String
  InstanceImageId:
    Description: The id of the instance image
    Type: String
  GuWebSSLCertificateID:
    Description: GU Web SSL Certificate ID
    Type: String
  InboundInstanceSSHAllowedCidr:
    Description: The CIDR allowed to access the instances via SSH
    Type: String
    Default: "77.91.248.0/21"

Resources:
  GCMWorkerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: {Ref: GCMWorkerQueueName}

  TopicMessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: {Ref: TopicMessageQueueName}

  GCMSubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: {Ref: GCMSubscriptionsTableName}
      KeySchema:
        - {AttributeName: notificationTopicId, KeyType: HASH}
        - {AttributeName: gcmBrowserId, KeyType: RANGE}
      AttributeDefinitions:
        - {AttributeName: notificationTopicId, AttributeType: S}
        - {AttributeName: gcmBrowserId, AttributeType: S}
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  LastSentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: {Ref: LastSentTableName}
      KeySchema:
        - {AttributeName: topicId, KeyType: HASH}
      AttributeDefinitions:
        - {AttributeName: topicId, AttributeType: S}
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  FrontendNotificationMessages:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: {Ref: FrontendNotificationMessageTableName}
      KeySchema:
        - {AttributeName: gcmBrowserId, KeyType: HASH}
      AttributeDefinitions:
        - {AttributeName: gcmBrowserId, AttributeType: S}
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  FrontendNotificationsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.248.120.0/22
      Tags:
        - {Key: Name, Value: frontend-notifications}

  FrontendNotificationsSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.248.120.0/24
      VpcId: {Ref: FrontendNotificationsVPC}
      AvailabilityZone: eu-west-1a
      Tags:
        - {Key: Name, Value: frontend-notifications-eu-west-1a}

  FrontendNotificationsSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.248.121.0/24
      VpcId: {Ref: FrontendNotificationsVPC}
      AvailabilityZone: eu-west-1b
      Tags:
        - {Key: Name, Value: frontend-notifications-eu-west-1b}

  FrontendNotificationsSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.248.122.0/24
      VpcId: {Ref: FrontendNotificationsVPC}
      AvailabilityZone: eu-west-1c
      Tags:
        - {Key: Name, Value: frontend-notifications-eu-west-1c}


  ElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Frontend notification elasticache messages subnet group
      SubnetIds:
        - {Ref: FrontendNotificationsSubnetOne}
        - {Ref: FrontendNotificationsSubnetTwo}
        - {Ref: FrontendNotificationsSubnetThree}

  ElasticacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: {Ref: FrontendNotificationsVPC}
      GroupDescription: Frontend Notification Messages security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0

  FrontendNotificationMessagesCacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      ClusterName: {Ref: FrontendNotificationMessagesCacheClusterName}
      CacheSubnetGroupName: {Ref: ElasticacheSubnetGroup}
      VpcSecurityGroupIds:
        - {Ref: ElasticacheSecurityGroup}
      CacheNodeType: cache.t2.small
      #1 CPU 1.5GB Memory, next up is cache.t2.medium 2CPU 3.2GB Memory
      AutoMinorVersionUpgrade: "true"
      Engine: redis
      NumCacheNodes: 1

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Frontend-Notifications

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        {Ref: FrontendNotificationsVPC}
      InternetGatewayId:
        {Ref: InternetGateway}

  # -- Routing --
  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        {Ref: FrontendNotificationsVPC}
      Tags:
        - Key: Name
          Value: Frontend-Notifications

  MainRouteTableInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: {Ref: MainRouteTable}
      GatewayId: {Ref: InternetGateway}
      DestinationCidrBlock: 0.0.0.0/0

  MainRouteTableInternetRouteSubnetOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: MainRouteTable}
      SubnetId: {Ref: FrontendNotificationsSubnetOne}

  MainRouteTableInternetRouteSubnetTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: MainRouteTable}
      SubnetId: {Ref: FrontendNotificationsSubnetTwo}

  MainRouteTableInternetRouteSubnetThree:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: MainRouteTable}
      SubnetId: {Ref: FrontendNotificationsSubnetThree}

  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal: { Service: [ec2.amazonaws.com] }
          Action:
            - sts:AssumeRole
  Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: FrontendNotificationsPolicy
      PolicyDocument:
        Statement:
        - Action:
            - sts:AssumeRole
          Effect: Allow
          Resource: "*"
        - Action:
            - sqs:*
          Effect: Allow
          Resource:
            Fn::Join: [":", ["arn:aws:sqs", {Ref: AWS::Region}, {Ref: AWS::AccountId}, {Ref: TopicMessageQueueName}]]
        - Action:
            - sqs:*
          Effect: Allow
          Resource:
            Fn::Join: [":", ["arn:aws:sqs", {Ref: AWS::Region}, {Ref: AWS::AccountId}, {Ref: GCMWorkerQueueName}]]
        - Action:
            - sqs:*
          Effect: Allow
          Resource:
            Fn::Join: [":", ["arn:aws:sqs", {Ref: AWS::Region}, {Ref: AWS::AccountId}, "NotificationMessageWorkerQueue"]]
        - Action:
            - dynamodb:*
          Effect: Allow
          Resource:
            Fn::Join: [":", ["arn:aws:dynamodb", {Ref: AWS::Region}, {Ref: AWS::AccountId}, Fn::Join: ["", ["table/", {Ref: GCMSubscriptionsTableName}]]]]
        - Action:
            - dynamodb:*
          Effect: Allow
          Resource:
            Fn::Join: [":", ["arn:aws:dynamodb", {Ref: AWS::Region}, {Ref: AWS::AccountId}, Fn::Join: ["", ["table/", {Ref: LastSentTableName}]]]]
        - Action:
            - dynamodb:*
          Effect: Allow
          Resource:
            Fn::Join: [":", ["arn:aws:dynamodb", {Ref: AWS::Region}, {Ref: AWS::AccountId}, Fn::Join: ["", ["table/", {Ref: FirehoseLeaseTableName}]]]]
        - Action:
            - EC2:Describe*
          Effect: Allow
          Resource: "*"
        - Action:
            - S3:getObject
          Effect: Allow
          Resource:
            - arn:aws:s3:::aws-frontend-artifacts/*
        - Action:
            - s3:ListBucket
          Effect: Allow
          Resource:
            - arn:aws:s3:::aws-frontend-artifacts
        - Action:
            - S3:getObject
          Effect: Allow
          Resource:
            - arn:aws:s3:::github-team-keys/*
        - Action:
            - s3:ListBucket
          Effect: Allow
          Resource:
            - arn:aws:s3:::github-team-keys
      Roles:
      - {Ref: Role}

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - {Ref: Role}

  CAPIEventWorkerELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: frontend-notifications-capi-event-worker
      VpcId: {Ref: FrontendNotificationsVPC}
      SecurityGroupIngress:
      - {IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0}

  CAPIEventWorkerELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
      - {Ref: CAPIEventWorkerELBSecurityGroup}
      Subnets:
        - {Ref: FrontendNotificationsSubnetOne}
        - {Ref: FrontendNotificationsSubnetTwo}
        - {Ref: FrontendNotificationsSubnetThree}
      Scheme: internet-facing
      Listeners:
      - {LoadBalancerPort: 80, InstancePort: 9000, Protocol: HTTP}
      HealthCheck:
        Target: 'HTTP:9000/_healthcheck'
        HealthyThreshold: 2
        UnhealthyThreshold: 2
        Interval: 10
        Timeout: 5

  CAPIEventWorkerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      VPCZoneIdentifier:
        - {Ref: FrontendNotificationsSubnetOne}
        - {Ref: FrontendNotificationsSubnetTwo}
        - {Ref: FrontendNotificationsSubnetThree}
      LaunchConfigurationName: {Ref: CAPIEventWorkerLaunchConfig}
      MinSize: 1
      MaxSize: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
      - {Ref: CAPIEventWorkerELB}
      Tags:
      - {Key: Stage, Value: PROD, PropagateAtLaunch: true}
      - {Key: Stack, Value: frontend, PropagateAtLaunch: true}
      - {Key: App, Value: capi-event-worker, PropagateAtLaunch: true}
      - {Key: Management, Value: port=9000, PropagateAtLaunch: true}

  CAPIEventWorkerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      #KeyName: frontend-notifications-capi-event-worker
      ImageId: {Ref: InstanceImageId}
      SecurityGroups:
      - {Ref: CAPIEventWorkerInstanceSecurityGroup}
      InstanceType: t2.small
      IamInstanceProfile: {Ref: InstanceProfile}
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: |
          #!/bin/bash -ev
          aws s3 cp s3://aws-frontend-artifacts/frontend/PROD/capi-event-worker/frontend-notifications.properties /etc/gu/frontend-notifications.properties
          /opt/features/ssh-keys/initialise-keys-and-cron-job.sh -l -b github-team-keys -t Guardian-Frontend
          /opt/features/native-packager/install.sh -b aws-frontend-artifacts -s -t tgz

  CAPIEventWorkerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontend notifications CAPI event worker
      VpcId: {Ref: FrontendNotificationsVPC}
      SecurityGroupIngress:
      - {IpProtocol: tcp, FromPort: 9000, ToPort: 9000, SourceSecurityGroupId: {Ref: CAPIEventWorkerELBSecurityGroup} }
      - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: {Ref: InboundInstanceSSHAllowedCidr} }


  # Message Worker
  MessageWorkerELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: frontend-notifications-message-worker
      VpcId: {Ref: FrontendNotificationsVPC}
      SecurityGroupIngress:
      - {IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0}

  MessageWorkerELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
      - {Ref: MessageWorkerELBSecurityGroup}
      Subnets:
        - {Ref: FrontendNotificationsSubnetOne}
        - {Ref: FrontendNotificationsSubnetTwo}
        - {Ref: FrontendNotificationsSubnetThree}
      Scheme: internet-facing
      Listeners:
      - {LoadBalancerPort: 80, InstancePort: 9000, Protocol: HTTP}
      HealthCheck:
        Target: 'HTTP:9000/_healthcheck'
        HealthyThreshold: 2
        UnhealthyThreshold: 2
        Interval: 10
        Timeout: 5

  MessageWorkerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      VPCZoneIdentifier:
        - {Ref: FrontendNotificationsSubnetOne}
        - {Ref: FrontendNotificationsSubnetTwo}
        - {Ref: FrontendNotificationsSubnetThree}
      LaunchConfigurationName: {Ref: MessageWorkerLaunchConfig}
      MinSize: 1
      MaxSize: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
      - {Ref: MessageWorkerELB}
      Tags:
      - {Key: Stage, Value: PROD, PropagateAtLaunch: true}
      - {Key: Stack, Value: frontend, PropagateAtLaunch: true}
      - {Key: App, Value: message-worker, PropagateAtLaunch: true}
      - {Key: Management, Value: port=9000, PropagateAtLaunch: true}

  MessageWorkerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: {Ref: InstanceImageId}
      SecurityGroups:
      - {Ref: MessageWorkerInstanceSecurityGroup}
      InstanceType: t2.small
      IamInstanceProfile: {Ref: InstanceProfile}
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: |
          #!/bin/bash -ev
          aws s3 cp s3://aws-frontend-artifacts/frontend/PROD/capi-event-worker/frontend-notifications.properties /etc/gu/frontend-notifications.properties
          /opt/features/ssh-keys/initialise-keys-and-cron-job.sh -l -b github-team-keys -t Guardian-Frontend
          /opt/features/native-packager/install.sh -b aws-frontend-artifacts -s -t tgz

  MessageWorkerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontend notifications CAPI event worker
      VpcId: {Ref: FrontendNotificationsVPC}
      SecurityGroupIngress:
      - {IpProtocol: tcp, FromPort: 9000, ToPort: 9000, SourceSecurityGroupId: {Ref: MessageWorkerELBSecurityGroup} }
      - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: {Ref: InboundInstanceSSHAllowedCidr} }

  MessageDeliveryELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: frontend-notifications-message-delivery
      VpcId: {Ref: FrontendNotificationsVPC}
      SecurityGroupIngress:
      - {IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0}
      - {IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0}

  MessageDeliveryELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
      - {Ref: MessageDeliveryELBSecurityGroup}
      Subnets:
        - {Ref: FrontendNotificationsSubnetOne}
        - {Ref: FrontendNotificationsSubnetTwo}
        - {Ref: FrontendNotificationsSubnetThree}
      Scheme: internet-facing
      Listeners:
      - {LoadBalancerPort: 443, InstancePort: 9000, Protocol: HTTPS, SSLCertificateId: {Ref: GuWebSSLCertificateID}}
      HealthCheck:
        Target: 'HTTP:9000/_healthcheck'
        HealthyThreshold: 2
        UnhealthyThreshold: 2
        Interval: 10
        Timeout: 5

  MessageDeliveryASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: {'Fn::GetAZs': ''}
      VPCZoneIdentifier:
        - {Ref: FrontendNotificationsSubnetOne}
        - {Ref: FrontendNotificationsSubnetTwo}
        - {Ref: FrontendNotificationsSubnetThree}
      LaunchConfigurationName: {Ref: MessageDeliveryLaunchConfig}
      MinSize: 1
      MaxSize: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
      - {Ref: MessageDeliveryELB}
      Tags:
      - {Key: Stage, Value: PROD, PropagateAtLaunch: true}
      - {Key: Stack, Value: frontend, PropagateAtLaunch: true}
      - {Key: App, Value: message-delivery, PropagateAtLaunch: true}
      - {Key: Management, Value: port=9000, PropagateAtLaunch: true}

  MessageDeliveryLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: {Ref: InstanceImageId}
      SecurityGroups:
      - {Ref: MessageDeliverySecurityGroup}
      InstanceType: t2.medium
      IamInstanceProfile: {Ref: InstanceProfile}
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: |
          #!/bin/bash -ev
          aws s3 cp s3://aws-frontend-artifacts/frontend/PROD/capi-event-worker/frontend-notifications.properties /etc/gu/frontend-notifications.properties
          /opt/features/ssh-keys/initialise-keys-and-cron-job.sh -l -b github-team-keys -t Guardian-Frontend
          /opt/features/native-packager/install.sh -b aws-frontend-artifacts -s -t tgz

  MessageDeliverySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontend notifications CAPI event worker
      VpcId: {Ref: FrontendNotificationsVPC}
      SecurityGroupIngress:
      - {IpProtocol: tcp, FromPort: 9000, ToPort: 9000, SourceSecurityGroupId: {Ref: MessageDeliveryELBSecurityGroup} }
      - {IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: {Ref: InboundInstanceSSHAllowedCidr}}

